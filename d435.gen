/*/
 * Copyright (c) 2019 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                              Martin Jacquet - November 2019
 */
/* ---- Includes ---------------------------------------------------------- */

#pragma require "openrobots2-idl >= 2.0"
#pragma require "mbzirc-idl"

#include "sensor/d435.idl"

/* ---- Component declaration --------------------------------------------- */

component d435 {
    version	    "0.1";
    email		"martin.jacquet@laas.fr";
    lang		"c";
    require	    "genom3 >= 2.99.26";
    codels-require	"realsense2", "opencv";

    /* ---- Exceptions ---------------------------------------------------- */

    exception e_rs { string<128> what; };
    exception e_mem { string<128> what; };

    /* ---- IDS ----------------------------------------------------------- */

    struct portinfo_s {
      string<128> name;
      or::time::ts last;
    };

    ids {
        d435::pipe_s        pipe;
        d435::RSdata_s      data;
        boolean             started;

        d435::frame_s       rgb;
        d435::frame_s       ir;
        d435::pc_s          pc;

        // sequence<portinfo_s>    ports;
    };

    /* ---- Ports --------------------------------------------------------- */

    port            out d435::pc_s          pc_out;
    // port multiple   out d435::frame_s       rgb_out;
    port            out d435::frame_s       rgb_out;
    port            out d435::intrinsics_s  intrinsics;
    port            out d435::extrinsics_s  extrinsics;

    /* ---- Tasks --------------------------------------------------------- */

    const unsigned short rgb_pub_period_ms = 16;
    const unsigned short depth_pub_period_ms = 50;

    task hw_comm {
        codel<start> d435_comm_start(out ::ids, out extrinsics)
            yield poll;

        async codel<poll> d435_comm_poll(inout pipe)
            yield pause::poll, read;

        codel<read> d435_comm_read(in pipe, out data, out started)
            yield poll;
    };

    task rgb_publish {
        period rgb_pub_period_ms ms;

        codel<start> d435_rgb_start(in started)
            yield pause::start, pub;

        codel<pub> d435_rgb_pub(in data, inout rgb, inout ir, out rgb_out)
            yield visu;

        codel<visu> d435_rgb_visu(in rgb, in ir)
            yield pause::pub;
    };

    task depth_publish {
        period depth_pub_period_ms ms;

        codel<start> d435_depth_start(in started)
            yield pause::start, pub;

        codel<pub> d435_depth_pub(in data, inout pc, out pc_out)
            yield pause::pub;
    };

    /* ---- Hardware connection ------------------------------------------- */

    activity connect() {
        task hw_comm;

        codel<start> d435_connect(out ::ids, out intrinsics)
            yield ether;
    };

    /* ---- Display/Record ------------------------------------------------ */

    activity display() {
        task rgb_publish;

        codel<start> d435_disp_start()
            yield ether;
    };

    activity stop_display() {
        task rgb_publish;

        codel<start> d435_disp_stop()
            yield ether;
    };

    activity record(in string<64> path = "/tmp/": "Video files path") {
        task rgb_publish;

        codel<start> d435_rec_start(in path, in rgb, in ir)
            yield ether;
    };

    activity stop_record() {
        task rgb_publish;

        codel<start> d435_rec_stop()
            yield ether;
    };

    /* ---- Calibration --------------------------------------------------- */

    activity set_extrinsics(in sequence<double,6> ext_values) {
        task hw_comm;

        codel<start> d435_set_extrinsics(in ext_values, out extrinsics)
            yield ether;
    };

    /* ---- Functions ---- */
};
