/*/
 * Copyright (c) 2019 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                              Martin Jacquet - November 2019
 */
/* ---- Includes ---------------------------------------------------------- */

#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"
#include "or/sensor/depth.idl"

/* ---- Component declaration --------------------------------------------- */

component d435 {
    version	    "1.0";
    email		"martin.jacquet@laas.fr";
    lang		"c";
    require	    "genom3 >= 2.99.26";
    codels-require	"realsense2, opencv";

    /* ---- Interfaces ---------------------------------------------------- */
    provides or_camera;

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_rs { string<128> what; };
    exception e_io { string<128> what; };
    exception e_mem { string<128> what; };

    /* ---- Ports --------------------------------------------------------- */
    // port out  or::sensor::pc    pc;
    // port out  or::sensor::frame ir;
    /* interfaces ports:
     *  port multiple out   or::sensor::frame    frame;
     *  port out  or::sensor::intrinsics    intrinsics;
     *  port out  or::sensor::extrinsics    extrinsics;
     */

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        or_camera::info info;
        or_camera::pipe pipe;
    };

    /* ---- Tasks --------------------------------------------------------- */
    task main {
        codel<start> d435_main_start(out ::ids, out extrinsics, out frame)
            yield poll;

        async codel<poll> d435_main_poll(in info.started, inout pipe)
            yield pause::poll, pub;

        codel<pub> d435_main_pub(in info.compression_rate, in pipe, out frame)
            yield poll;
    };

    /* ---- Hardware connection ------------------------------------------- */
    activity connect(in string<32> serial = : "serial number of the desired D435") {
        task main;
        throw e_rs, e_io;

        codel<start> d435_connect(in serial, out pipe, in info, out info.started, out intrinsics)
            yield ether;
    };

    activity disconnect() {
        task main;
        throw e_rs;

        codel<start> d435_disconnect(out pipe, out info.started)
            yield ether;
    };

    /* ---- Control setters ----------------------------------------------- */
    attribute set_format(in info.format = "RGB8" : "Pixel format (RGB8, RGBA8, Y16)") {
        throw e_io;
        validate set_format(local in format);
    };
    attribute set_fps(in info.frequency = 30 : "Camera frequency (6, 15, 30, 60(up to 640x480))") {
        throw e_io;
        validate set_fps(local in frequency);
    };
    attribute set_size(in info.size = {1280, 720} : "Video size (1920x1080, 1280x720, 960x540, 848x480, 640x480, 640x360, 424x240, 320x240)") {
        throw e_io;
        validate set_size(local in size);
    };
    attribute set_compression(in info.compression_rate = -1 : "Image compression (0-100) ; -1 to disable compression.") {
        throw e_io;
        validate set_compression_rate(local in compression_rate);
    };

    /* ---- Calibration --------------------------------------------------- */
    activity set_extrinsics(in sequence<float,6> ext_values) {
        task main;

        codel<start> d435_set_extrinsics(in ext_values, out extrinsics)
            yield ether;
    };

};
