/*/
 * Copyright (c) 2019 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                              Martin Jacquet - November 2019
 */

// inspired by Felix's work for Minnie

#ifndef IDL_D435_STRUCT
#define IDL_D435_STRUCT

#include "or/time/time.idl"

module d435 {

    // const unsigned short pcMaxSize = 20000;    // arbitrary ; unused right now
    // const unsigned long pixMaxSize = 6220800;  // 1920*1080*3 ; unused right now

    struct color {
        octet r, g, b;
    };
    struct pos {
        float x, y, z;
    };

    struct pc_s {
    or::time::ts ts;
    boolean                 isRegistered;   // Is there color info on the point cloud
    unsigned short          length;         // Number of points in cloud

    sequence<pos>           points;
    sequence<color>         colors;         // Empty if isRegistered is false
    };


    struct frame_s {
        or::time::ts    ts;
        unsigned short  height;         // max 1080
        unsigned short  width;          // max 1920

        // Sequence of pixels for the frame, line by line
        sequence<octet> pixels;
    };

    native pipe_s;                      // RealSense pipeline, encapsulating the actual device and sensors
    native RSdata_s;                    // Encapsulating RealSense data frames

    typedef sequence<float,5> seq5F;    // Calibration matrix (fx, fy, cx, cy, gamma) and Distortion coefficients

};

#endif /* IDL_D435_STRUCT */
